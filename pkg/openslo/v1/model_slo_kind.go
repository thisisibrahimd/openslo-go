/*
OpenSLO V1 Schema

OpenSLO V1 Schema

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openslo_v1

import (
	"encoding/json"
	"fmt"
)

// SloKind the model 'SloKind'
type SloKind string

// List of slo_kind
const (
	SLO SloKind = "SLO"
)

// All allowed values of SloKind enum
var AllowedSloKindEnumValues = []SloKind{
	"SLO",
}

func (v *SloKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SloKind(value)
	for _, existing := range AllowedSloKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SloKind", value)
}

// NewSloKindFromValue returns a pointer to a valid SloKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSloKindFromValue(v string) (*SloKind, error) {
	ev := SloKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SloKind: valid values are %v", v, AllowedSloKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SloKind) IsValid() bool {
	for _, existing := range AllowedSloKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to slo_kind value
func (v SloKind) Ptr() *SloKind {
	return &v
}

type NullableSloKind struct {
	value *SloKind
	isSet bool
}

func (v NullableSloKind) Get() *SloKind {
	return v.value
}

func (v *NullableSloKind) Set(val *SloKind) {
	v.value = val
	v.isSet = true
}

func (v NullableSloKind) IsSet() bool {
	return v.isSet
}

func (v *NullableSloKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloKind(val *SloKind) *NullableSloKind {
	return &NullableSloKind{value: val, isSet: true}
}

func (v NullableSloKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
