/*
OpenSLO V1 Schema

OpenSLO V1 Schema

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openslo_v1

import (
	"encoding/json"
)

// checks if the GoodRatioMetric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GoodRatioMetric{}

// GoodRatioMetric struct for GoodRatioMetric
type GoodRatioMetric struct {
	MetricSource *MetricSource `json:"metricSource,omitempty"`
}

// NewGoodRatioMetric instantiates a new GoodRatioMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoodRatioMetric() *GoodRatioMetric {
	this := GoodRatioMetric{}
	return &this
}

// NewGoodRatioMetricWithDefaults instantiates a new GoodRatioMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoodRatioMetricWithDefaults() *GoodRatioMetric {
	this := GoodRatioMetric{}
	return &this
}

// GetMetricSource returns the MetricSource field value if set, zero value otherwise.
func (o *GoodRatioMetric) GetMetricSource() MetricSource {
	if o == nil || IsNil(o.MetricSource) {
		var ret MetricSource
		return ret
	}
	return *o.MetricSource
}

// GetMetricSourceOk returns a tuple with the MetricSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodRatioMetric) GetMetricSourceOk() (*MetricSource, bool) {
	if o == nil || IsNil(o.MetricSource) {
		return nil, false
	}
	return o.MetricSource, true
}

// HasMetricSource returns a boolean if a field has been set.
func (o *GoodRatioMetric) HasMetricSource() bool {
	if o != nil && !IsNil(o.MetricSource) {
		return true
	}

	return false
}

// SetMetricSource gets a reference to the given MetricSource and assigns it to the MetricSource field.
func (o *GoodRatioMetric) SetMetricSource(v MetricSource) {
	o.MetricSource = &v
}

func (o GoodRatioMetric) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GoodRatioMetric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MetricSource) {
		toSerialize["metricSource"] = o.MetricSource
	}
	return toSerialize, nil
}

type NullableGoodRatioMetric struct {
	value *GoodRatioMetric
	isSet bool
}

func (v NullableGoodRatioMetric) Get() *GoodRatioMetric {
	return v.value
}

func (v *NullableGoodRatioMetric) Set(val *GoodRatioMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableGoodRatioMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableGoodRatioMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoodRatioMetric(val *GoodRatioMetric) *NullableGoodRatioMetric {
	return &NullableGoodRatioMetric{value: val, isSet: true}
}

func (v NullableGoodRatioMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoodRatioMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
