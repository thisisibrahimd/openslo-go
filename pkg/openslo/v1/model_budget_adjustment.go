/*
OpenSLO V1 Schema

OpenSLO V1 Schema

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openslo_v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BudgetAdjustment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BudgetAdjustment{}

// BudgetAdjustment struct for BudgetAdjustment
type BudgetAdjustment struct {
	ApiVersion OpensloApiVersion     `json:"apiVersion"`
	Kind       BudgetAdjustmentKind  `json:"kind"`
	Metadata   Metadata              `json:"metadata"`
	Spec       *BudgetAdjustmentSpec `json:"spec,omitempty"`
}

type _BudgetAdjustment BudgetAdjustment

// NewBudgetAdjustment instantiates a new BudgetAdjustment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBudgetAdjustment(apiVersion OpensloApiVersion, kind BudgetAdjustmentKind, metadata Metadata) *BudgetAdjustment {
	this := BudgetAdjustment{}
	this.ApiVersion = apiVersion
	this.Kind = kind
	this.Metadata = metadata
	return &this
}

// NewBudgetAdjustmentWithDefaults instantiates a new BudgetAdjustment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBudgetAdjustmentWithDefaults() *BudgetAdjustment {
	this := BudgetAdjustment{}
	return &this
}

// GetApiVersion returns the ApiVersion field value
func (o *BudgetAdjustment) GetApiVersion() OpensloApiVersion {
	if o == nil {
		var ret OpensloApiVersion
		return ret
	}

	return o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value
// and a boolean to check if the value has been set.
func (o *BudgetAdjustment) GetApiVersionOk() (*OpensloApiVersion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiVersion, true
}

// SetApiVersion sets field value
func (o *BudgetAdjustment) SetApiVersion(v OpensloApiVersion) {
	o.ApiVersion = v
}

// GetKind returns the Kind field value
func (o *BudgetAdjustment) GetKind() BudgetAdjustmentKind {
	if o == nil {
		var ret BudgetAdjustmentKind
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *BudgetAdjustment) GetKindOk() (*BudgetAdjustmentKind, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *BudgetAdjustment) SetKind(v BudgetAdjustmentKind) {
	o.Kind = v
}

// GetMetadata returns the Metadata field value
func (o *BudgetAdjustment) GetMetadata() Metadata {
	if o == nil {
		var ret Metadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *BudgetAdjustment) GetMetadataOk() (*Metadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *BudgetAdjustment) SetMetadata(v Metadata) {
	o.Metadata = v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *BudgetAdjustment) GetSpec() BudgetAdjustmentSpec {
	if o == nil || IsNil(o.Spec) {
		var ret BudgetAdjustmentSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetAdjustment) GetSpecOk() (*BudgetAdjustmentSpec, bool) {
	if o == nil || IsNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *BudgetAdjustment) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given BudgetAdjustmentSpec and assigns it to the Spec field.
func (o *BudgetAdjustment) SetSpec(v BudgetAdjustmentSpec) {
	o.Spec = &v
}

func (o BudgetAdjustment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BudgetAdjustment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["apiVersion"] = o.ApiVersion
	toSerialize["kind"] = o.Kind
	toSerialize["metadata"] = o.Metadata
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	return toSerialize, nil
}

func (o *BudgetAdjustment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"apiVersion",
		"kind",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBudgetAdjustment := _BudgetAdjustment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBudgetAdjustment)

	if err != nil {
		return err
	}

	*o = BudgetAdjustment(varBudgetAdjustment)

	return err
}

type NullableBudgetAdjustment struct {
	value *BudgetAdjustment
	isSet bool
}

func (v NullableBudgetAdjustment) Get() *BudgetAdjustment {
	return v.value
}

func (v *NullableBudgetAdjustment) Set(val *BudgetAdjustment) {
	v.value = val
	v.isSet = true
}

func (v NullableBudgetAdjustment) IsSet() bool {
	return v.isSet
}

func (v *NullableBudgetAdjustment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBudgetAdjustment(val *BudgetAdjustment) *NullableBudgetAdjustment {
	return &NullableBudgetAdjustment{value: val, isSet: true}
}

func (v NullableBudgetAdjustment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBudgetAdjustment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
