/*
OpenSLO V1 Schema

OpenSLO V1 Schema

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openslo_v1

import (
	"encoding/json"
	"fmt"
)

// DatasourceKind the model 'DatasourceKind'
type DatasourceKind string

// List of datasource_kind
const (
	DATASOURCE DatasourceKind = "Datasource"
)

// All allowed values of DatasourceKind enum
var AllowedDatasourceKindEnumValues = []DatasourceKind{
	"Datasource",
}

func (v *DatasourceKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DatasourceKind(value)
	for _, existing := range AllowedDatasourceKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DatasourceKind", value)
}

// NewDatasourceKindFromValue returns a pointer to a valid DatasourceKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatasourceKindFromValue(v string) (*DatasourceKind, error) {
	ev := DatasourceKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatasourceKind: valid values are %v", v, AllowedDatasourceKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatasourceKind) IsValid() bool {
	for _, existing := range AllowedDatasourceKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to datasource_kind value
func (v DatasourceKind) Ptr() *DatasourceKind {
	return &v
}

type NullableDatasourceKind struct {
	value *DatasourceKind
	isSet bool
}

func (v NullableDatasourceKind) Get() *DatasourceKind {
	return v.value
}

func (v *NullableDatasourceKind) Set(val *DatasourceKind) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasourceKind) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasourceKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasourceKind(val *DatasourceKind) *NullableDatasourceKind {
	return &NullableDatasourceKind{value: val, isSet: true}
}

func (v NullableDatasourceKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasourceKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
