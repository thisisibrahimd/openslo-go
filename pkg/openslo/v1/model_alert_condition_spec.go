/*
OpenSLO V1 Schema

OpenSLO V1 Schema

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openslo_v1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AlertConditionSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertConditionSpec{}

// AlertConditionSpec struct for AlertConditionSpec
type AlertConditionSpec struct {
	Description *string `json:"description,omitempty"`
	Severity string `json:"severity"`
	Condition AlertConditionSpecInline `json:"condition"`
}

type _AlertConditionSpec AlertConditionSpec

// NewAlertConditionSpec instantiates a new AlertConditionSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertConditionSpec(severity string, condition AlertConditionSpecInline) *AlertConditionSpec {
	this := AlertConditionSpec{}
	this.Severity = severity
	this.Condition = condition
	return &this
}

// NewAlertConditionSpecWithDefaults instantiates a new AlertConditionSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertConditionSpecWithDefaults() *AlertConditionSpec {
	this := AlertConditionSpec{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AlertConditionSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertConditionSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AlertConditionSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AlertConditionSpec) SetDescription(v string) {
	o.Description = &v
}

// GetSeverity returns the Severity field value
func (o *AlertConditionSpec) GetSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *AlertConditionSpec) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *AlertConditionSpec) SetSeverity(v string) {
	o.Severity = v
}

// GetCondition returns the Condition field value
func (o *AlertConditionSpec) GetCondition() AlertConditionSpecInline {
	if o == nil {
		var ret AlertConditionSpecInline
		return ret
	}

	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value
// and a boolean to check if the value has been set.
func (o *AlertConditionSpec) GetConditionOk() (*AlertConditionSpecInline, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Condition, true
}

// SetCondition sets field value
func (o *AlertConditionSpec) SetCondition(v AlertConditionSpecInline) {
	o.Condition = v
}

func (o AlertConditionSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertConditionSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["severity"] = o.Severity
	toSerialize["condition"] = o.Condition
	return toSerialize, nil
}

func (o *AlertConditionSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"severity",
		"condition",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlertConditionSpec := _AlertConditionSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAlertConditionSpec)

	if err != nil {
		return err
	}

	*o = AlertConditionSpec(varAlertConditionSpec)

	return err
}

type NullableAlertConditionSpec struct {
	value *AlertConditionSpec
	isSet bool
}

func (v NullableAlertConditionSpec) Get() *AlertConditionSpec {
	return v.value
}

func (v *NullableAlertConditionSpec) Set(val *AlertConditionSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertConditionSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertConditionSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertConditionSpec(val *AlertConditionSpec) *NullableAlertConditionSpec {
	return &NullableAlertConditionSpec{value: val, isSet: true}
}

func (v NullableAlertConditionSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertConditionSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


