/*
OpenSLO V1 Schema

OpenSLO V1 Schema

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openslo_v1

import (
	"encoding/json"
	"fmt"
)

// GenericKind the model 'GenericKind'
type GenericKind string

// List of generic_kind
const (
	SLO                       GenericKind = "SLO"
	BUDGET_ADJUSTMENT         GenericKind = "BudgetAdjustment"
	SLI                       GenericKind = "SLI"
	SERVICE                   GenericKind = "Service"
	DATA_SOURCE               GenericKind = "DataSource"
	ALERT_CONDITION           GenericKind = "AlertCondition"
	ALERT_POLICY              GenericKind = "AlertPolicy"
	ALERT_NOTIFICATION_TARGET GenericKind = "AlertNotificationTarget"
)

// All allowed values of GenericKind enum
var AllowedGenericKindEnumValues = []GenericKind{
	"SLO",
	"BudgetAdjustment",
	"SLI",
	"Service",
	"DataSource",
	"AlertCondition",
	"AlertPolicy",
	"AlertNotificationTarget",
}

func (v *GenericKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GenericKind(value)
	for _, existing := range AllowedGenericKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GenericKind", value)
}

// NewGenericKindFromValue returns a pointer to a valid GenericKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGenericKindFromValue(v string) (*GenericKind, error) {
	ev := GenericKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GenericKind: valid values are %v", v, AllowedGenericKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GenericKind) IsValid() bool {
	for _, existing := range AllowedGenericKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to generic_kind value
func (v GenericKind) Ptr() *GenericKind {
	return &v
}

type NullableGenericKind struct {
	value *GenericKind
	isSet bool
}

func (v NullableGenericKind) Get() *GenericKind {
	return v.value
}

func (v *NullableGenericKind) Set(val *GenericKind) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericKind) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericKind(val *GenericKind) *NullableGenericKind {
	return &NullableGenericKind{value: val, isSet: true}
}

func (v NullableGenericKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
