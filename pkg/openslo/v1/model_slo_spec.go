/*
OpenSLO V1 Schema

OpenSLO V1 Schema

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openslo_v1

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SloSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloSpec{}

// SloSpec struct for SloSpec
type SloSpec struct {
	Description *string `json:"description,omitempty"`
	Service string `json:"service" validate:"regexp=^[a-z0-9][a-z0-9.|\\/\\\\\\\\-]*[a-z0-9]*$"`
	Indicator *SLIInline `json:"indicator,omitempty"`
	IndicatorRef *string `json:"indicatorRef,omitempty" validate:"regexp=^[a-z0-9][a-z0-9.|\\/\\\\\\\\-]*[a-z0-9]*$"`
	TimeWindow *TimeWindow `json:"timeWindow,omitempty"`
	BudgetingMethod string `json:"budgetingMethod"`
	Objectives []SloObjective `json:"objectives"`
}

type _SloSpec SloSpec

// NewSloSpec instantiates a new SloSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloSpec(service string, budgetingMethod string, objectives []SloObjective) *SloSpec {
	this := SloSpec{}
	this.Service = service
	this.BudgetingMethod = budgetingMethod
	this.Objectives = objectives
	return &this
}

// NewSloSpecWithDefaults instantiates a new SloSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloSpecWithDefaults() *SloSpec {
	this := SloSpec{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SloSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SloSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SloSpec) SetDescription(v string) {
	o.Description = &v
}

// GetService returns the Service field value
func (o *SloSpec) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *SloSpec) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *SloSpec) SetService(v string) {
	o.Service = v
}

// GetIndicator returns the Indicator field value if set, zero value otherwise.
func (o *SloSpec) GetIndicator() SLIInline {
	if o == nil || IsNil(o.Indicator) {
		var ret SLIInline
		return ret
	}
	return *o.Indicator
}

// GetIndicatorOk returns a tuple with the Indicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloSpec) GetIndicatorOk() (*SLIInline, bool) {
	if o == nil || IsNil(o.Indicator) {
		return nil, false
	}
	return o.Indicator, true
}

// HasIndicator returns a boolean if a field has been set.
func (o *SloSpec) HasIndicator() bool {
	if o != nil && !IsNil(o.Indicator) {
		return true
	}

	return false
}

// SetIndicator gets a reference to the given SLIInline and assigns it to the Indicator field.
func (o *SloSpec) SetIndicator(v SLIInline) {
	o.Indicator = &v
}

// GetIndicatorRef returns the IndicatorRef field value if set, zero value otherwise.
func (o *SloSpec) GetIndicatorRef() string {
	if o == nil || IsNil(o.IndicatorRef) {
		var ret string
		return ret
	}
	return *o.IndicatorRef
}

// GetIndicatorRefOk returns a tuple with the IndicatorRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloSpec) GetIndicatorRefOk() (*string, bool) {
	if o == nil || IsNil(o.IndicatorRef) {
		return nil, false
	}
	return o.IndicatorRef, true
}

// HasIndicatorRef returns a boolean if a field has been set.
func (o *SloSpec) HasIndicatorRef() bool {
	if o != nil && !IsNil(o.IndicatorRef) {
		return true
	}

	return false
}

// SetIndicatorRef gets a reference to the given string and assigns it to the IndicatorRef field.
func (o *SloSpec) SetIndicatorRef(v string) {
	o.IndicatorRef = &v
}

// GetTimeWindow returns the TimeWindow field value if set, zero value otherwise.
func (o *SloSpec) GetTimeWindow() TimeWindow {
	if o == nil || IsNil(o.TimeWindow) {
		var ret TimeWindow
		return ret
	}
	return *o.TimeWindow
}

// GetTimeWindowOk returns a tuple with the TimeWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloSpec) GetTimeWindowOk() (*TimeWindow, bool) {
	if o == nil || IsNil(o.TimeWindow) {
		return nil, false
	}
	return o.TimeWindow, true
}

// HasTimeWindow returns a boolean if a field has been set.
func (o *SloSpec) HasTimeWindow() bool {
	if o != nil && !IsNil(o.TimeWindow) {
		return true
	}

	return false
}

// SetTimeWindow gets a reference to the given TimeWindow and assigns it to the TimeWindow field.
func (o *SloSpec) SetTimeWindow(v TimeWindow) {
	o.TimeWindow = &v
}

// GetBudgetingMethod returns the BudgetingMethod field value
func (o *SloSpec) GetBudgetingMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BudgetingMethod
}

// GetBudgetingMethodOk returns a tuple with the BudgetingMethod field value
// and a boolean to check if the value has been set.
func (o *SloSpec) GetBudgetingMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BudgetingMethod, true
}

// SetBudgetingMethod sets field value
func (o *SloSpec) SetBudgetingMethod(v string) {
	o.BudgetingMethod = v
}

// GetObjectives returns the Objectives field value
func (o *SloSpec) GetObjectives() []SloObjective {
	if o == nil {
		var ret []SloObjective
		return ret
	}

	return o.Objectives
}

// GetObjectivesOk returns a tuple with the Objectives field value
// and a boolean to check if the value has been set.
func (o *SloSpec) GetObjectivesOk() ([]SloObjective, bool) {
	if o == nil {
		return nil, false
	}
	return o.Objectives, true
}

// SetObjectives sets field value
func (o *SloSpec) SetObjectives(v []SloObjective) {
	o.Objectives = v
}

func (o SloSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["service"] = o.Service
	if !IsNil(o.Indicator) {
		toSerialize["indicator"] = o.Indicator
	}
	if !IsNil(o.IndicatorRef) {
		toSerialize["indicatorRef"] = o.IndicatorRef
	}
	if !IsNil(o.TimeWindow) {
		toSerialize["timeWindow"] = o.TimeWindow
	}
	toSerialize["budgetingMethod"] = o.BudgetingMethod
	toSerialize["objectives"] = o.Objectives
	return toSerialize, nil
}

func (o *SloSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"service",
		"budgetingMethod",
		"objectives",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSloSpec := _SloSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSloSpec)

	if err != nil {
		return err
	}

	*o = SloSpec(varSloSpec)

	return err
}

type NullableSloSpec struct {
	value *SloSpec
	isSet bool
}

func (v NullableSloSpec) Get() *SloSpec {
	return v.value
}

func (v *NullableSloSpec) Set(val *SloSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSloSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSloSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloSpec(val *SloSpec) *NullableSloSpec {
	return &NullableSloSpec{value: val, isSet: true}
}

func (v NullableSloSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


