/*
OpenSLO V1 Schema

OpenSLO V1 Schema

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openslo_v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TimeWindow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeWindow{}

// TimeWindow struct for TimeWindow
type TimeWindow struct {
	Duration  string              `json:"duration" validate:"regexp=^[1-9][0-9]*[mhdwMQY]$"`
	Calendar  *TimeWindowCalendar `json:"calendar,omitempty"`
	IsRolling *bool               `json:"isRolling,omitempty"`
}

type _TimeWindow TimeWindow

// NewTimeWindow instantiates a new TimeWindow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeWindow(duration string) *TimeWindow {
	this := TimeWindow{}
	this.Duration = duration
	var isRolling bool = true
	this.IsRolling = &isRolling
	return &this
}

// NewTimeWindowWithDefaults instantiates a new TimeWindow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeWindowWithDefaults() *TimeWindow {
	this := TimeWindow{}
	var isRolling bool = true
	this.IsRolling = &isRolling
	return &this
}

// GetDuration returns the Duration field value
func (o *TimeWindow) GetDuration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *TimeWindow) GetDurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *TimeWindow) SetDuration(v string) {
	o.Duration = v
}

// GetCalendar returns the Calendar field value if set, zero value otherwise.
func (o *TimeWindow) GetCalendar() TimeWindowCalendar {
	if o == nil || IsNil(o.Calendar) {
		var ret TimeWindowCalendar
		return ret
	}
	return *o.Calendar
}

// GetCalendarOk returns a tuple with the Calendar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeWindow) GetCalendarOk() (*TimeWindowCalendar, bool) {
	if o == nil || IsNil(o.Calendar) {
		return nil, false
	}
	return o.Calendar, true
}

// HasCalendar returns a boolean if a field has been set.
func (o *TimeWindow) HasCalendar() bool {
	if o != nil && !IsNil(o.Calendar) {
		return true
	}

	return false
}

// SetCalendar gets a reference to the given TimeWindowCalendar and assigns it to the Calendar field.
func (o *TimeWindow) SetCalendar(v TimeWindowCalendar) {
	o.Calendar = &v
}

// GetIsRolling returns the IsRolling field value if set, zero value otherwise.
func (o *TimeWindow) GetIsRolling() bool {
	if o == nil || IsNil(o.IsRolling) {
		var ret bool
		return ret
	}
	return *o.IsRolling
}

// GetIsRollingOk returns a tuple with the IsRolling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeWindow) GetIsRollingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRolling) {
		return nil, false
	}
	return o.IsRolling, true
}

// HasIsRolling returns a boolean if a field has been set.
func (o *TimeWindow) HasIsRolling() bool {
	if o != nil && !IsNil(o.IsRolling) {
		return true
	}

	return false
}

// SetIsRolling gets a reference to the given bool and assigns it to the IsRolling field.
func (o *TimeWindow) SetIsRolling(v bool) {
	o.IsRolling = &v
}

func (o TimeWindow) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeWindow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["duration"] = o.Duration
	if !IsNil(o.Calendar) {
		toSerialize["calendar"] = o.Calendar
	}
	if !IsNil(o.IsRolling) {
		toSerialize["isRolling"] = o.IsRolling
	}
	return toSerialize, nil
}

func (o *TimeWindow) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"duration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimeWindow := _TimeWindow{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimeWindow)

	if err != nil {
		return err
	}

	*o = TimeWindow(varTimeWindow)

	return err
}

type NullableTimeWindow struct {
	value *TimeWindow
	isSet bool
}

func (v NullableTimeWindow) Get() *TimeWindow {
	return v.value
}

func (v *NullableTimeWindow) Set(val *TimeWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeWindow(val *TimeWindow) *NullableTimeWindow {
	return &NullableTimeWindow{value: val, isSet: true}
}

func (v NullableTimeWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
