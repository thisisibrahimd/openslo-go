/*
OpenSLO V1 Schema

OpenSLO V1 Schema

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openslo_v1

import (
	"encoding/json"
)

// checks if the BadRatioMetric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BadRatioMetric{}

// BadRatioMetric struct for BadRatioMetric
type BadRatioMetric struct {
	MetricSource *MetricSource `json:"metricSource,omitempty"`
}

// NewBadRatioMetric instantiates a new BadRatioMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBadRatioMetric() *BadRatioMetric {
	this := BadRatioMetric{}
	return &this
}

// NewBadRatioMetricWithDefaults instantiates a new BadRatioMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBadRatioMetricWithDefaults() *BadRatioMetric {
	this := BadRatioMetric{}
	return &this
}

// GetMetricSource returns the MetricSource field value if set, zero value otherwise.
func (o *BadRatioMetric) GetMetricSource() MetricSource {
	if o == nil || IsNil(o.MetricSource) {
		var ret MetricSource
		return ret
	}
	return *o.MetricSource
}

// GetMetricSourceOk returns a tuple with the MetricSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadRatioMetric) GetMetricSourceOk() (*MetricSource, bool) {
	if o == nil || IsNil(o.MetricSource) {
		return nil, false
	}
	return o.MetricSource, true
}

// HasMetricSource returns a boolean if a field has been set.
func (o *BadRatioMetric) HasMetricSource() bool {
	if o != nil && !IsNil(o.MetricSource) {
		return true
	}

	return false
}

// SetMetricSource gets a reference to the given MetricSource and assigns it to the MetricSource field.
func (o *BadRatioMetric) SetMetricSource(v MetricSource) {
	o.MetricSource = &v
}

func (o BadRatioMetric) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BadRatioMetric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MetricSource) {
		toSerialize["metricSource"] = o.MetricSource
	}
	return toSerialize, nil
}

type NullableBadRatioMetric struct {
	value *BadRatioMetric
	isSet bool
}

func (v NullableBadRatioMetric) Get() *BadRatioMetric {
	return v.value
}

func (v *NullableBadRatioMetric) Set(val *BadRatioMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableBadRatioMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableBadRatioMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBadRatioMetric(val *BadRatioMetric) *NullableBadRatioMetric {
	return &NullableBadRatioMetric{value: val, isSet: true}
}

func (v NullableBadRatioMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBadRatioMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


