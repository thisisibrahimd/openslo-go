/*
OpenSLO V1 Schema

OpenSLO V1 Schema

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openslo_v1

import (
	"encoding/json"
)

// checks if the DatasourceSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasourceSpec{}

// DatasourceSpec struct for DatasourceSpec
type DatasourceSpec struct {
	Type *string `json:"type,omitempty"`
	ConnectionDetails map[string]interface{} `json:"connectionDetails,omitempty"`
}

// NewDatasourceSpec instantiates a new DatasourceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasourceSpec() *DatasourceSpec {
	this := DatasourceSpec{}
	return &this
}

// NewDatasourceSpecWithDefaults instantiates a new DatasourceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasourceSpecWithDefaults() *DatasourceSpec {
	this := DatasourceSpec{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DatasourceSpec) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSpec) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DatasourceSpec) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DatasourceSpec) SetType(v string) {
	o.Type = &v
}

// GetConnectionDetails returns the ConnectionDetails field value if set, zero value otherwise.
func (o *DatasourceSpec) GetConnectionDetails() map[string]interface{} {
	if o == nil || IsNil(o.ConnectionDetails) {
		var ret map[string]interface{}
		return ret
	}
	return o.ConnectionDetails
}

// GetConnectionDetailsOk returns a tuple with the ConnectionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSpec) GetConnectionDetailsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ConnectionDetails) {
		return map[string]interface{}{}, false
	}
	return o.ConnectionDetails, true
}

// HasConnectionDetails returns a boolean if a field has been set.
func (o *DatasourceSpec) HasConnectionDetails() bool {
	if o != nil && !IsNil(o.ConnectionDetails) {
		return true
	}

	return false
}

// SetConnectionDetails gets a reference to the given map[string]interface{} and assigns it to the ConnectionDetails field.
func (o *DatasourceSpec) SetConnectionDetails(v map[string]interface{}) {
	o.ConnectionDetails = v
}

func (o DatasourceSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasourceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ConnectionDetails) {
		toSerialize["connectionDetails"] = o.ConnectionDetails
	}
	return toSerialize, nil
}

type NullableDatasourceSpec struct {
	value *DatasourceSpec
	isSet bool
}

func (v NullableDatasourceSpec) Get() *DatasourceSpec {
	return v.value
}

func (v *NullableDatasourceSpec) Set(val *DatasourceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasourceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasourceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasourceSpec(val *DatasourceSpec) *NullableDatasourceSpec {
	return &NullableDatasourceSpec{value: val, isSet: true}
}

func (v NullableDatasourceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasourceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


