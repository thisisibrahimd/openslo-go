/*
OpenSLO V1 Schema

OpenSLO V1 Schema

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openslo_v1

import (
	"encoding/json"
)

// checks if the RatioMetric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatioMetric{}

// RatioMetric struct for RatioMetric
type RatioMetric struct {
	Counter *bool `json:"counter,omitempty"`
	Good *GoodRatioMetric `json:"good,omitempty"`
	Bad *BadRatioMetric `json:"bad,omitempty"`
	Total *TotalRatioMetric `json:"total,omitempty"`
}

// NewRatioMetric instantiates a new RatioMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatioMetric() *RatioMetric {
	this := RatioMetric{}
	return &this
}

// NewRatioMetricWithDefaults instantiates a new RatioMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatioMetricWithDefaults() *RatioMetric {
	this := RatioMetric{}
	return &this
}

// GetCounter returns the Counter field value if set, zero value otherwise.
func (o *RatioMetric) GetCounter() bool {
	if o == nil || IsNil(o.Counter) {
		var ret bool
		return ret
	}
	return *o.Counter
}

// GetCounterOk returns a tuple with the Counter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatioMetric) GetCounterOk() (*bool, bool) {
	if o == nil || IsNil(o.Counter) {
		return nil, false
	}
	return o.Counter, true
}

// HasCounter returns a boolean if a field has been set.
func (o *RatioMetric) HasCounter() bool {
	if o != nil && !IsNil(o.Counter) {
		return true
	}

	return false
}

// SetCounter gets a reference to the given bool and assigns it to the Counter field.
func (o *RatioMetric) SetCounter(v bool) {
	o.Counter = &v
}

// GetGood returns the Good field value if set, zero value otherwise.
func (o *RatioMetric) GetGood() GoodRatioMetric {
	if o == nil || IsNil(o.Good) {
		var ret GoodRatioMetric
		return ret
	}
	return *o.Good
}

// GetGoodOk returns a tuple with the Good field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatioMetric) GetGoodOk() (*GoodRatioMetric, bool) {
	if o == nil || IsNil(o.Good) {
		return nil, false
	}
	return o.Good, true
}

// HasGood returns a boolean if a field has been set.
func (o *RatioMetric) HasGood() bool {
	if o != nil && !IsNil(o.Good) {
		return true
	}

	return false
}

// SetGood gets a reference to the given GoodRatioMetric and assigns it to the Good field.
func (o *RatioMetric) SetGood(v GoodRatioMetric) {
	o.Good = &v
}

// GetBad returns the Bad field value if set, zero value otherwise.
func (o *RatioMetric) GetBad() BadRatioMetric {
	if o == nil || IsNil(o.Bad) {
		var ret BadRatioMetric
		return ret
	}
	return *o.Bad
}

// GetBadOk returns a tuple with the Bad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatioMetric) GetBadOk() (*BadRatioMetric, bool) {
	if o == nil || IsNil(o.Bad) {
		return nil, false
	}
	return o.Bad, true
}

// HasBad returns a boolean if a field has been set.
func (o *RatioMetric) HasBad() bool {
	if o != nil && !IsNil(o.Bad) {
		return true
	}

	return false
}

// SetBad gets a reference to the given BadRatioMetric and assigns it to the Bad field.
func (o *RatioMetric) SetBad(v BadRatioMetric) {
	o.Bad = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *RatioMetric) GetTotal() TotalRatioMetric {
	if o == nil || IsNil(o.Total) {
		var ret TotalRatioMetric
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatioMetric) GetTotalOk() (*TotalRatioMetric, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *RatioMetric) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given TotalRatioMetric and assigns it to the Total field.
func (o *RatioMetric) SetTotal(v TotalRatioMetric) {
	o.Total = &v
}

func (o RatioMetric) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatioMetric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Counter) {
		toSerialize["counter"] = o.Counter
	}
	if !IsNil(o.Good) {
		toSerialize["good"] = o.Good
	}
	if !IsNil(o.Bad) {
		toSerialize["bad"] = o.Bad
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

type NullableRatioMetric struct {
	value *RatioMetric
	isSet bool
}

func (v NullableRatioMetric) Get() *RatioMetric {
	return v.value
}

func (v *NullableRatioMetric) Set(val *RatioMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableRatioMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableRatioMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatioMetric(val *RatioMetric) *NullableRatioMetric {
	return &NullableRatioMetric{value: val, isSet: true}
}

func (v NullableRatioMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatioMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


