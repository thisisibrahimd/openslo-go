/*
OpenSLO V1 Schema

OpenSLO V1 Schema

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openslo_v1

import (
	"encoding/json"
)

// checks if the TimeWindowCalendar type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeWindowCalendar{}

// TimeWindowCalendar struct for TimeWindowCalendar
type TimeWindowCalendar struct {
	StartTime *string `json:"startTime,omitempty" validate:"regexp=^\\\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01]) ([01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d$"`
	TimeZone  *string `json:"timeZone,omitempty" validate:"regexp=[A-Z][a-zA-Z_]+\\/[A-Z][a-zA-Z_]+"`
}

// NewTimeWindowCalendar instantiates a new TimeWindowCalendar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeWindowCalendar() *TimeWindowCalendar {
	this := TimeWindowCalendar{}
	return &this
}

// NewTimeWindowCalendarWithDefaults instantiates a new TimeWindowCalendar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeWindowCalendarWithDefaults() *TimeWindowCalendar {
	this := TimeWindowCalendar{}
	return &this
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *TimeWindowCalendar) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeWindowCalendar) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *TimeWindowCalendar) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *TimeWindowCalendar) SetStartTime(v string) {
	o.StartTime = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *TimeWindowCalendar) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeWindowCalendar) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *TimeWindowCalendar) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *TimeWindowCalendar) SetTimeZone(v string) {
	o.TimeZone = &v
}

func (o TimeWindowCalendar) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeWindowCalendar) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.TimeZone) {
		toSerialize["timeZone"] = o.TimeZone
	}
	return toSerialize, nil
}

type NullableTimeWindowCalendar struct {
	value *TimeWindowCalendar
	isSet bool
}

func (v NullableTimeWindowCalendar) Get() *TimeWindowCalendar {
	return v.value
}

func (v *NullableTimeWindowCalendar) Set(val *TimeWindowCalendar) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeWindowCalendar) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeWindowCalendar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeWindowCalendar(val *TimeWindowCalendar) *NullableTimeWindowCalendar {
	return &NullableTimeWindowCalendar{value: val, isSet: true}
}

func (v NullableTimeWindowCalendar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeWindowCalendar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
