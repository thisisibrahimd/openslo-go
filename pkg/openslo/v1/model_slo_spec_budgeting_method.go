/*
OpenSLO V1 Schema

OpenSLO V1 Schema

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openslo_v1

import (
	"encoding/json"
	"fmt"
)

// SloSpecBudgetingMethod the model 'SloSpecBudgetingMethod'
type SloSpecBudgetingMethod string

// List of sloSpec_budgetingMethod
const (
	OCCURRENCES SloSpecBudgetingMethod = "Occurrences"
	TIMESLICES  SloSpecBudgetingMethod = "Timeslices"
)

// All allowed values of SloSpecBudgetingMethod enum
var AllowedSloSpecBudgetingMethodEnumValues = []SloSpecBudgetingMethod{
	"Occurrences",
	"Timeslices",
}

func (v *SloSpecBudgetingMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SloSpecBudgetingMethod(value)
	for _, existing := range AllowedSloSpecBudgetingMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SloSpecBudgetingMethod", value)
}

// NewSloSpecBudgetingMethodFromValue returns a pointer to a valid SloSpecBudgetingMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSloSpecBudgetingMethodFromValue(v string) (*SloSpecBudgetingMethod, error) {
	ev := SloSpecBudgetingMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SloSpecBudgetingMethod: valid values are %v", v, AllowedSloSpecBudgetingMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SloSpecBudgetingMethod) IsValid() bool {
	for _, existing := range AllowedSloSpecBudgetingMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to sloSpec_budgetingMethod value
func (v SloSpecBudgetingMethod) Ptr() *SloSpecBudgetingMethod {
	return &v
}

type NullableSloSpecBudgetingMethod struct {
	value *SloSpecBudgetingMethod
	isSet bool
}

func (v NullableSloSpecBudgetingMethod) Get() *SloSpecBudgetingMethod {
	return v.value
}

func (v *NullableSloSpecBudgetingMethod) Set(val *SloSpecBudgetingMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableSloSpecBudgetingMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableSloSpecBudgetingMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloSpecBudgetingMethod(val *SloSpecBudgetingMethod) *NullableSloSpecBudgetingMethod {
	return &NullableSloSpecBudgetingMethod{value: val, isSet: true}
}

func (v NullableSloSpecBudgetingMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloSpecBudgetingMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
