/*
OpenSLO V1 Schema

OpenSLO V1 Schema

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openslo_v1

import (
	"encoding/json"
)

// checks if the MetricSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricSource{}

// MetricSource struct for MetricSource
type MetricSource struct {
	MetricSourceRef *string `json:"metricSourceRef,omitempty" validate:"regexp=^[a-z0-9][a-z0-9.|\\/\\\\\\\\-]*[a-z0-9]*$"`
	Type *string `json:"type,omitempty"`
	Spec map[string]interface{} `json:"spec,omitempty"`
}

// NewMetricSource instantiates a new MetricSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricSource() *MetricSource {
	this := MetricSource{}
	return &this
}

// NewMetricSourceWithDefaults instantiates a new MetricSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricSourceWithDefaults() *MetricSource {
	this := MetricSource{}
	return &this
}

// GetMetricSourceRef returns the MetricSourceRef field value if set, zero value otherwise.
func (o *MetricSource) GetMetricSourceRef() string {
	if o == nil || IsNil(o.MetricSourceRef) {
		var ret string
		return ret
	}
	return *o.MetricSourceRef
}

// GetMetricSourceRefOk returns a tuple with the MetricSourceRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricSource) GetMetricSourceRefOk() (*string, bool) {
	if o == nil || IsNil(o.MetricSourceRef) {
		return nil, false
	}
	return o.MetricSourceRef, true
}

// HasMetricSourceRef returns a boolean if a field has been set.
func (o *MetricSource) HasMetricSourceRef() bool {
	if o != nil && !IsNil(o.MetricSourceRef) {
		return true
	}

	return false
}

// SetMetricSourceRef gets a reference to the given string and assigns it to the MetricSourceRef field.
func (o *MetricSource) SetMetricSourceRef(v string) {
	o.MetricSourceRef = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MetricSource) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricSource) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MetricSource) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MetricSource) SetType(v string) {
	o.Type = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *MetricSource) GetSpec() map[string]interface{} {
	if o == nil || IsNil(o.Spec) {
		var ret map[string]interface{}
		return ret
	}
	return o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricSource) GetSpecOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Spec) {
		return map[string]interface{}{}, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *MetricSource) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given map[string]interface{} and assigns it to the Spec field.
func (o *MetricSource) SetSpec(v map[string]interface{}) {
	o.Spec = v
}

func (o MetricSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MetricSourceRef) {
		toSerialize["metricSourceRef"] = o.MetricSourceRef
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	return toSerialize, nil
}

type NullableMetricSource struct {
	value *MetricSource
	isSet bool
}

func (v NullableMetricSource) Get() *MetricSource {
	return v.value
}

func (v *NullableMetricSource) Set(val *MetricSource) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricSource) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricSource(val *MetricSource) *NullableMetricSource {
	return &NullableMetricSource{value: val, isSet: true}
}

func (v NullableMetricSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


