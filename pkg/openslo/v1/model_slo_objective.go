/*
OpenSLO V1 Schema

OpenSLO V1 Schema

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openslo_v1

import (
	"encoding/json"
)

// checks if the SloObjective type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SloObjective{}

// SloObjective struct for SloObjective
type SloObjective struct {
	DisplayName     *string          `json:"displayName,omitempty"`
	Op              *Operation       `json:"op,omitempty"`
	Value           *float32         `json:"value,omitempty"`
	Target          *float32         `json:"target,omitempty"`
	TimeSliceTarget *float32         `json:"timeSliceTarget,omitempty"`
	TimeSliceWindow *TimeSliceWindow `json:"timeSliceWindow,omitempty"`
	AlertPolicies   []string         `json:"alertPolicies,omitempty"`
}

// NewSloObjective instantiates a new SloObjective object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloObjective() *SloObjective {
	this := SloObjective{}
	return &this
}

// NewSloObjectiveWithDefaults instantiates a new SloObjective object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloObjectiveWithDefaults() *SloObjective {
	this := SloObjective{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SloObjective) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloObjective) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SloObjective) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SloObjective) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *SloObjective) GetOp() Operation {
	if o == nil || IsNil(o.Op) {
		var ret Operation
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloObjective) GetOpOk() (*Operation, bool) {
	if o == nil || IsNil(o.Op) {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *SloObjective) HasOp() bool {
	if o != nil && !IsNil(o.Op) {
		return true
	}

	return false
}

// SetOp gets a reference to the given Operation and assigns it to the Op field.
func (o *SloObjective) SetOp(v Operation) {
	o.Op = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SloObjective) GetValue() float32 {
	if o == nil || IsNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloObjective) GetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SloObjective) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *SloObjective) SetValue(v float32) {
	o.Value = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *SloObjective) GetTarget() float32 {
	if o == nil || IsNil(o.Target) {
		var ret float32
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloObjective) GetTargetOk() (*float32, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *SloObjective) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given float32 and assigns it to the Target field.
func (o *SloObjective) SetTarget(v float32) {
	o.Target = &v
}

// GetTimeSliceTarget returns the TimeSliceTarget field value if set, zero value otherwise.
func (o *SloObjective) GetTimeSliceTarget() float32 {
	if o == nil || IsNil(o.TimeSliceTarget) {
		var ret float32
		return ret
	}
	return *o.TimeSliceTarget
}

// GetTimeSliceTargetOk returns a tuple with the TimeSliceTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloObjective) GetTimeSliceTargetOk() (*float32, bool) {
	if o == nil || IsNil(o.TimeSliceTarget) {
		return nil, false
	}
	return o.TimeSliceTarget, true
}

// HasTimeSliceTarget returns a boolean if a field has been set.
func (o *SloObjective) HasTimeSliceTarget() bool {
	if o != nil && !IsNil(o.TimeSliceTarget) {
		return true
	}

	return false
}

// SetTimeSliceTarget gets a reference to the given float32 and assigns it to the TimeSliceTarget field.
func (o *SloObjective) SetTimeSliceTarget(v float32) {
	o.TimeSliceTarget = &v
}

// GetTimeSliceWindow returns the TimeSliceWindow field value if set, zero value otherwise.
func (o *SloObjective) GetTimeSliceWindow() TimeSliceWindow {
	if o == nil || IsNil(o.TimeSliceWindow) {
		var ret TimeSliceWindow
		return ret
	}
	return *o.TimeSliceWindow
}

// GetTimeSliceWindowOk returns a tuple with the TimeSliceWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloObjective) GetTimeSliceWindowOk() (*TimeSliceWindow, bool) {
	if o == nil || IsNil(o.TimeSliceWindow) {
		return nil, false
	}
	return o.TimeSliceWindow, true
}

// HasTimeSliceWindow returns a boolean if a field has been set.
func (o *SloObjective) HasTimeSliceWindow() bool {
	if o != nil && !IsNil(o.TimeSliceWindow) {
		return true
	}

	return false
}

// SetTimeSliceWindow gets a reference to the given TimeSliceWindow and assigns it to the TimeSliceWindow field.
func (o *SloObjective) SetTimeSliceWindow(v TimeSliceWindow) {
	o.TimeSliceWindow = &v
}

// GetAlertPolicies returns the AlertPolicies field value if set, zero value otherwise.
func (o *SloObjective) GetAlertPolicies() []string {
	if o == nil || IsNil(o.AlertPolicies) {
		var ret []string
		return ret
	}
	return o.AlertPolicies
}

// GetAlertPoliciesOk returns a tuple with the AlertPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloObjective) GetAlertPoliciesOk() ([]string, bool) {
	if o == nil || IsNil(o.AlertPolicies) {
		return nil, false
	}
	return o.AlertPolicies, true
}

// HasAlertPolicies returns a boolean if a field has been set.
func (o *SloObjective) HasAlertPolicies() bool {
	if o != nil && !IsNil(o.AlertPolicies) {
		return true
	}

	return false
}

// SetAlertPolicies gets a reference to the given []string and assigns it to the AlertPolicies field.
func (o *SloObjective) SetAlertPolicies(v []string) {
	o.AlertPolicies = v
}

func (o SloObjective) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SloObjective) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Op) {
		toSerialize["op"] = o.Op
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.TimeSliceTarget) {
		toSerialize["timeSliceTarget"] = o.TimeSliceTarget
	}
	if !IsNil(o.TimeSliceWindow) {
		toSerialize["timeSliceWindow"] = o.TimeSliceWindow
	}
	if !IsNil(o.AlertPolicies) {
		toSerialize["alertPolicies"] = o.AlertPolicies
	}
	return toSerialize, nil
}

type NullableSloObjective struct {
	value *SloObjective
	isSet bool
}

func (v NullableSloObjective) Get() *SloObjective {
	return v.value
}

func (v *NullableSloObjective) Set(val *SloObjective) {
	v.value = val
	v.isSet = true
}

func (v NullableSloObjective) IsSet() bool {
	return v.isSet
}

func (v *NullableSloObjective) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloObjective(val *SloObjective) *NullableSloObjective {
	return &NullableSloObjective{value: val, isSet: true}
}

func (v NullableSloObjective) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloObjective) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
